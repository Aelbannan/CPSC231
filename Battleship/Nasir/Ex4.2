##Author: Nasir Osman
##Date: 09-10-2013
##Course: CPSC 231 Tutorial 2 Group 5

##Let's define our global variables over here
GRID_WIDTH = 10
GRID_HEIGHT = 10
VESSEL_NAMES = ['Aircraft carrier','Battleship','Submarine','Destroyer']
VESSEL_SIZES = [5,4,3,2]
NUM_OF_VESSELS = 4

def info():
    title_screen = """                                                                                    
     ______   ______   ______   ______   ______   ______   ______   ______   ______    
    /_____/  /_____/  /_____/  /_____/  /_____/  /_____/  /_____/  /_____/  /_____/    
    /_____/  /_____/  /_____/  /_____/  /_____/  /_____/  /_____/  /_____/  /_____/    
                                                                                       
                                                                                       
 ._.    __________         __    __  .__           _________.__    .__             ._. 
 | |    \______   \_____ _/  |__/  |_|  |   ____  /   _____/|  |__ |__|_____       | | 
 |_|     |    |  _/\__  \\   __\   __\  | _/ __ \ \_____  \ |  |  \|  \____ \      |_| 
 |-|     |    |   \ / __ \|  |  |  | |  |_\  ___/ /        \|   Y  \  |  |_> >     |-| 
 | |     |______  /(____  /__|  |__| |____/\___  >_______  /|___|  /__|   __/      | | 
 |_|            \/      \/                     \/        \/      \/   |__|         |_| 
                                 The unfinished game! 
                                  (C) 2013     
                                  
                                  
                  """
    print(title_screen)
    print("Welcome to Battleship! Although this is far from being the full actual game yet, you will be able " \
          "to test it out as we progress through its development!")
    print()

def print_vessel(index, x, y, direction):
    x_to_display = chr(x + ord('A'))    
    y_to_display = y + 1

    print(VESSEL_NAMES[index], " Position:")
    print("\t Column: ", x_to_display)
    print("\t Row: ", y_to_display)
    print("\t Direction ", direction)
	

def get_location(vessel_index):
    name = VESSEL_NAMES[vessel_index]
    size = VESSEL_SIZES[vessel_index]

    # Get input from the user.
    print("Enter placement of your", name, "(", size,  "spaces)")
    column = input("Left column (A-J):")
    row = int(input("Top row (1-10):"))
    direction_input= input("Would you like your vessel placed [v]ertically or [h]orizontally?")

    # We will also convert the users input into a full string by using if statements!
    # And we will initially set the actual direction to an empty string
    direction = ' '
     
	# I am thinking of  turning this section of code into a get_direction function so it will
    # just reprompt the user to enter in the correct orientation of his/her vessel instead of having to re-enter in the column and row over again!!
  
    if direction_input =='v':
        #Set the direction to vertical
        direction = 'vertical'
    elif direction_input =='h':
        #Set the direction to horizontal
        direction = 'horizontal'
    # User entered an invalid string, we use recursion until the input is valid
    else:
        print('Please enter in a valid orientation for your vessel! (ie. v for vertical and h for horizontal.')
        get_location(vessel_index)
        
    # Convert user input to row and column values between 0 and 9 
    column = ord(column) - ord('A')
    row = row - 1

    # Check that the input entered by the user is valid.
    if (column < 0 or column >= GRID_WIDTH) :
        # The start column entered is invalid.
        print("Invalid column.  Column must be a value between A and J")
        get_location(name, size);
    elif (row < 0 or row >= GRID_HEIGHT) :
        # the start row is invalid
        print("Invalid row.  Row must be a value between 1 and 10")
        get_location(name, size);
    else :
        if (direction == 'horizontal' and column + size > GRID_WIDTH) :
            # The end column is off the grid for this vessel
            print("Invalid column.  The vessel is directed horizontally to the right")
            print("and does not fit on the grid with this starting column.")
            get_location(name, size);
        elif (direction == 'vertical' and row + size > GRID_HEIGHT) :
            # The end row is off the grid for this vessel
            print("Invalid row.  The vessel is directed vertically downwards")
            print("and does not fit on the grid with this starting row.")
            get_location(name, size);
        else :
            # The location entered is valid.
            print_vessel(vessel_index, column, row, direction)

def main():
    info()

    for x in range(0, NUM_OF_VESSELS):
        get_location(x)    
main()

    
                            

          

  
  
